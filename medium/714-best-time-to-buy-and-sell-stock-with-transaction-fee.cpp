// 0714-best-time-to-buy-and-sell-stock-with-transaction-fee.cpp
// LeetCode 714. Best Time to Buy and Sell Stock with Transaction Fee
// Difficulty: Medium
// https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/
//
// üìù R√©sum√© :
// On cherche √† maximiser le profit en achetant et revendant des actions.
// Chaque vente est soumise √† une taxe fixe (fee).
// R√®gle : On ne peut pas d√©tenir plusieurs actions en m√™me temps.
//
// üí° Strat√©gie : Dynamic Programming (DP).
// - On garde deux √©tats pour chaque jour :
//   1. hold = profit max si on a une action ce jour-l√†.
//   2. cash = profit max si on n‚Äôa pas d‚Äôaction ce jour-l√†.
// - Transitions :
//   ‚Ä¢ hold[i] = max(hold[i-1], cash[i-1] - prices[i])
//   ‚Ä¢ cash[i] = max(cash[i-1], hold[i-1] + prices[i] - fee)
// - On retourne cash[n-1], car le maximum final est atteint sans action en main.
//
// üß† Complexit√© :
// - Temps : O(n), on parcourt les prix une seule fois.
// - M√©moire : O(1), car on r√©utilise deux variables (pas besoin d‚Äôun tableau).
//
// ‚úÖ Statut : Solution valid√©e

#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        int hold = -prices[0];   // si on ach√®te le premier jour
        int cash = 0;            // si on ne fait rien le premier jour

        for (int i = 1; i < n; i++) {
            hold = max(hold, cash - prices[i]);                // garder ou acheter
            cash = max(cash, hold + prices[i] - fee);          // garder ou vendre
        }

        return cash;
    }
};